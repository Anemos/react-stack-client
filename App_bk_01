import logo from './logo.svg';
import './App.css';
import React, { Component } from 'react';
import { ButtonToolbar, Button } from 'react-bootstrap';

function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

// Bootstrap Button 
function BootButton(props) {
  return (
      <div>
        <ButtonToolbar>
          <Button variant="primary">Primary</Button>{' '}
          <Button variant="secondary">Secondary</Button>{' '}
          <Button variant="success">Success</Button>{' '}
          <Button variant="warning">Warning</Button>{' '}
          <Button variant="danger">Danger</Button> 
          <Button variant="info">Info</Button>{' '}
          <Button variant="light">Light</Button> 
          <Button variant="dark">Dark</Button>{' '}
          <Button variant="link">Link</Button>
        </ButtonToolbar>
      </div>
  ); 
}
// Rendering Multiple Component
function NumberList(props) {
  const numbers=props.numbers;
  const listItems = numbers.map( number => 
    <li key={number.toString()}>
      {number * 2}
    </li> 
  );
  
  return (
    <ul>{listItems}</ul>
  );
}

// Preventing Component from Rendering
function WarningBanner(props) {
  if (!props.warn) {
    return null;
  }
  
  return (
    <div className="warning">
      Warning!
    </div>
  );
}

class Page extends React.Component {
  constructor(props) {
    super(props);
    this.state = {showWarning:true};
    this.handleToggleClick = this.handleToggleClick.bind(this);
  }
  
  handleToggleClick() {
    this.setState( state => ({
      showWarning: !state.showWarning
    })); 
  }
  
  render() {
    return (
      <div>
        <WarningBanner warn={this.state.showWarning} />
        <button onClick={this.handleToggleClick}>
          {this.state.showWarning ? 'Hide' : 'Show'}
        </button>
      </div>
    );
  }
}

// Conditional Handling
function UserGreeting(props) {
  return <h1>Welcome Back</h1>; 
}
function GuestGreeting(props) {
  return <h1>Please sing in</h1>;
}

function Greeting(props) {
  const isLoggedIn = props.isLoggedIn;
  
  if (isLoggedIn) {
    return <UserGreeting />;
  }
  return <GuestGreeting />; 
}

function LoginButton(props) {
  return(
    <button onClick={props.onClick}>
      Login
    </button>
  );
}

function LogoutButton(props) {
  return (
    <button onClick={props.onClick}>
      Logout
    </button>
  );
}

class LoginControl extends React.Component {
  constructor(props) {
    super(props);
    this.handleLoginClick = this.handleLoginClick.bind(this);
    this.handleLogoutClick = this.handleLogoutClick.bind(this);
    this.state = {isLoggedIn: false};
  }
  
  handleLoginClick() {
    this.setState({isLoggedIn:true}); 
  } 
  
  handleLogoutClick() {
    this.setState({isLoggedIn:false}); 
  }
  
  render() {
    const isLoggedIn = this.state.isLoggedIn;
    let button;
    if (isLoggedIn) {
      button = <LogoutButton onClick={this.handleLogoutClick} />;
    } else {
      button = <LoginButton onClick={this.handleLoginClick} />;
    }
    
    return (
      <div>
        <Greeting isLoggedIn={isLoggedIn} />
        {button}
      </div>
    );
  }
}

// Handling Event
class Toggle extends React.Component {
  constructor(props) {
   super(props);
   this.state = {isToggleOn:true};
   
   //This binding is necessary to make `this` work to callback
   this.handleClick = this.handleClick.bind(this); 
  } 
  
  handleClick() {
    this.setState(state => ({
      isToggleOn: !state.isToggleOn
    }));
  }
  
  render() {
    return (
      <button onClick={this.handleClick}>
        {this.state.isToggleOn ? 'ON' : 'OFF'}
      </button>
    );
  }
}

// State and Life Cycle
class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};  
  }
  
  componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(), 
      1000);
  }
  
  componentWillUnmount() {
    clearInterval(this.timerID);
  }
  
  tick() {
    this.setState({
      date: new Date()
    }); 
  }
  
  render() {
    return (
    <div>
      <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
    </div>
    );
  }
}
function formatDate(date) {
  return date.toLocaleDateString() + '  ' + date.toLocaleTimeString();
}

function Avatar(props) {
  return (
    <img
      className="Avatar"
      src={props.user.avatarUrl}
      alt={props.user.name}
    />
  );
}

function UserInfo(props) {
  return (
    <div className="UserInfo">
      <Avatar user={props.user} />
      <div className="UserInfo-name">
        {props.user.name}
      </div>
    </div>
  );
}

function Comment(props) {
  return (
    <div className="Comment">
      <UserInfo user={props.author} />
      <div className="Comment-text">
        {props.text}
      </div>
      <div className="Comment-date">
        {formatDate(props.date)}
      </div>
    </div>
  );
}

const comment = {
  date: new Date(),
  creator: 'Nemos',
  text: 'I hope you enjoy learning React!',
  author: {
    name: 'Hello Kitty',
    avatarUrl: 'https://placekitten.com/g/64/64',
  },
};

function App() {
  const numbers=[1,2,3,4,5];
  
  return (
    <div className="App">
      <header className="App-header">
        <BootButton />
        <NumberList numbers={numbers} />
        <Clock />
        <Toggle name={comment.creator} />
        <LoginControl />
        <Page />
        <h1>Hello, world!</h1>
        <Welcome name="Nemos" />
        <Comment
          date={comment.date}
          text={comment.text}
          author={comment.author}
        />
      </header>
    </div>
  );
}

export default App;
